generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
 id                    Int       @id @default(autoincrement()) @map("id")
 firstName             String    @map("first_name")
 lastName              String    @map("last_name")
 email                 String    @unique
 age                   Int?
 gender                String?
 address               String?
 phoneNumber           Int?      @map("phone_number")
 isDeleted             Boolean   @default(false) @map("is_deleted")
 isAdmin               Boolean   @default(false) @map("is_admin")
 password              String
 isInitinalPassword    Boolean   @default(false) @map("is_initinal_password")
 createdAt             DateTime  @default(now()) @map("created_at")
 updatedAt             DateTime  @updatedAt @map("updated_at")

 pay                   Pay?
 fileSender            File[]    @relation("sender")
 fileReceiver          File[]    @relation("receiver")
 messageSender         Message[] @relation("sender")
 messageReceiver       Message[] @relation("receiver")
 timeRecords           TimeRecord[]
 monthlyWorkHour       MonthlyWorkHour[]
 apis                  Api[]

 @@map("users")
}

model Pay {
 id             Int       @id @default(autoincrement()) @map("id")
 user           User      @relation(fields: [userId], references: [id])
 userId         Int       @unique @map("user_id")
 isDeleted      Boolean   @default(false) @map("is_deleted")
 employmentType String    @map("employment_type")
 fixedSalary    Int?      @map("fixed_salary")
 hourWage       Int?      @map("hour_wage")
 overtimePay    Int?      @map("overtime_pay")
 paymentDate    DateTime? @map("payment_date")
 createdAt      DateTime  @default(now()) @map("created_at")
 updatedAt      DateTime  @updatedAt @map("updated_at")

 @@map("pays")
}

model File {
 id          Int       @id @default(autoincrement()) @map("id")
 sender      User      @relation("sender", fields: [senderId], references: [id])
 senderId    Int       @map("sender_id")
 isDeleted   Boolean   @default(false) @map("is_deleted")
 title       String
 tags        Tag       @relation(fields: [tagId], references: [id])
 tagId       Int       @map("tag_id")
 deadline    DateTime?
 filePath    String?   @map("file_path")
 fileSize    Int?      @map("file_size")
 fileType    String?   @map("file_type")
 status      Status    @relation(fields: [statusId], references: [id])
 statusId    Int       @map("status_id")
 sendAt      DateTime  @map("send_at")
 receiver    User      @relation("receiver", fields: [receiverId], references: [id])
 receiverId  Int       @map("receiver_id")
 createdAt   DateTime  @default(now()) @map("created_at")
 updatedAt   DateTime  @updatedAt @map("updated_at")

 messages     Message[]

 @@map("files")
}

model Tag {
 id          Int       @id @default(autoincrement()) @map("id")
 name        String
 createdAt   DateTime  @default(now()) @map("created_at")
 updatedAt   DateTime  @updatedAt @map("updated_at")

 tag         File[]

 @@map("tags")
}

model Status {
 id          Int       @id @default(autoincrement()) @map("id")
 name        String
 createdAt   DateTime  @default(now()) @map("created_at")
 updatedAt   DateTime  @updatedAt @map("updated_at")

 status      File[]

 @@map("status")
}

model Message {
 id             Int       @id @default(autoincrement()) @map("id")
 sender         User      @relation("sender", fields: [senderId], references: [id])
 senderId       Int       @map("sender_id")
 isDeleted      Boolean   @default(false) @map("is_deleted")
 file           File      @relation(fields: [fileId], references: [id])
 fileId         Int       @map("file_id")
 sendAt         DateTime  @map("send_at")
 receiver       User      @relation("receiver", fields: [receiverId], references: [id])
 receiverId     Int       @map("receiver_id")
 content        String
 createdAt      DateTime  @default(now()) @map("created_at")
 updatedAt      DateTime  @updatedAt @map("updated_at")

 @@map("messages")
}

model TimeRecord {
 id             Int       @id @default(autoincrement()) @map("id")
 user           User      @relation(fields: [userId], references: [id])
 userId         Int       @map("user_id")
 isDeleted      Boolean   @default(false) @map("is_deleted")
 yearMonth      String    @map("year_month")
 totalWorkHours Float     @map("total_work_hours")
 monthlySalary  Int       @map("monthly_salary")
 createdAt      DateTime  @default(now()) @map("created_at")
 updatedAt      DateTime  @updatedAt @map("updated_at")

 @@map("time_records")
}

model MonthlyWorkHour {
  id                  Int       @id @default(autoincrement())
  user                User      @relation(fields: [userId], references: [id])
  userId              Int       @map("user_id")
  isDeleted           Boolean   @default(false) @map("is_deleted")
  clockInDatetime     DateTime  @map("year_month")
  clockOutDatetime    DateTime  @map("total_work_hours")
  breakTime           Int       @default(0) @map("monthly_salary")
  comment             String
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  @@map("monthly_work_hours")
}

model Api {
  id             Int       @id @default(autoincrement())
  user           User      @relation(fields: [userId], references: [id])
  userId         Int       @map("user_id")
  isDeleted      Boolean   @default(false) @map("is_deleted")
  content        String
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  @@map("apis")
}